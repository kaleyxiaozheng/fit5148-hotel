/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel;

import Util.WarningMessage;
import hotelappfit5148.*;
import java.math.BigDecimal;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleDriver;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author thaonguyen
 */
public class HotelPanel extends javax.swing.JPanel {

    Object columnHeaders[] = {"HOTEL_ID", "HOTEL_NAME", "HOTEL_TYPE", "CONSTUCTION_YEAR", "COUNTRY", "CITY", "ADDRESS", "CONTACT_NUMBER", "EMAIL"};
    Object data[][] = {{}};
    DefaultTableModel dtm = new DefaultTableModel(data, columnHeaders);
    Connection conn = null;
    Statement stmt = null;

    /**
     * Creates new form HotelPanel
     */
    public HotelPanel() {
        initComponents();
        showAllHotelToTable();
    }

    private void showAllHotelToTable() {
        conn = Database.getInstance().getDBConnection(Database.DB_FIT5148A);
        dtm.setRowCount(0);
        try {
            DriverManager.registerDriver(new OracleDriver());
            stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery("select hotel_id, hotel_name, hotel_type, "
                    + "construction_year, country, city, address, "
                    + "contact_number, email from hotel  order by hotel_id DESC");

            ResultSetMetaData mdata = rset.getMetaData();
            int numberOfColumns = mdata.getColumnCount();
            while (rset.next()) {
                Object[] rowData = new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; i++) {
                    rowData[i] = rset.getObject(i + 1);
                }
                dtm.addRow(rowData);
            }
            Database.getInstance().closeDBConnection();
        } catch (SQLException f) {
            System.out.println(f.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HotelScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        searchButton = new javax.swing.JButton();
        newHotel = new javax.swing.JButton();
        updateHotel = new javax.swing.JButton();
        deleteHotel = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 500));

        jTable1.setModel(dtm);
        HotelScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Hotel Type");

        List<String> typeListCombox = new ArrayList<String>();
        typeListCombox.add("All Types");
        typeListCombox.addAll(getHotelType());
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(typeListCombox.toArray()));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        newHotel.setText("New Hotel");
        newHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newHotelActionPerformed(evt);
            }
        });

        updateHotel.setText("Update");
        updateHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHotelActionPerformed(evt);
            }
        });

        deleteHotel.setText("Delete");
        deleteHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHotelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(HotelScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(newHotel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateHotel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteHotel)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HotelScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newHotel)
                    .addComponent(updateHotel)
                    .addComponent(deleteHotel))
                .addGap(63, 63, 63))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        dtm.setRowCount(0);

        try {
            // TODO add your handling code here:

            String selectedHotelType = String.valueOf(jComboBox2.getSelectedItem());
            StringBuffer sbSQL = new StringBuffer("select hotel_id, hotel_name, hotel_type, "
                    + "construction_year, country, city, address, "
                    + "contact_number, email from hotel");
            if (!"All Types".equals(selectedHotelType)) {
                sbSQL.append(" where hotel_type = '" + selectedHotelType + "'");
            }
            sbSQL.append(" order by hotel_id DESC");
            ResultSet rset = Database.getInstance().selectRecords(Database.DB_FIT5148A, sbSQL.toString());
            ResultSetMetaData mdata = rset.getMetaData();
            int numberOfColumns = mdata.getColumnCount();
            while (rset.next()) {
                Object[] rowData = new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; i++) {
                    rowData[i] = rset.getObject(i + 1);
                }
                dtm.addRow(rowData);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void newHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHotelActionPerformed
        // TODO add your handling code here:
        NewHotel hotelForm = new NewHotel();
        hotelForm.setVisible(true);

        //        NewHotelDialog newHotelDialog = new NewHotelDialog();
        //        newHotelDialog.setVisible(true);
        //
        //        dtm.setRowCount(0);
        //        conn = DBConnection.getDBConnection("Database.DB_FIT5148A");
        //        try {
        //            DriverManager.registerDriver(new OracleDriver());
        //            stmt = conn.createStatement();
        //            ResultSet rset = stmt.executeQuery("select hotel_id, hotel_name, hotel_type, "
        //                    + "construction_year, country, city, address, "
        //                    + "contact_number, email from hotel order by hotel_id DESC");
        //
        //            ResultSetMetaData mdata = rset.getMetaData();
        //            int numberOfColumns = mdata.getColumnCount();
        //            while (rset.next()) {
        //                Object[] rowData = new Object[numberOfColumns];
        //                for (int i = 0; i < rowData.length; i++) {
        //                    rowData[i] = rset.getObject(i + 1);
        //                }
        //                dtm.addRow(rowData);
        //            }
        //            conn.close();
        //
        //        } catch (SQLException f) {
        //            System.out.println(f.getMessage());
        //        }
    }//GEN-LAST:event_newHotelActionPerformed

    private void updateHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHotelActionPerformed
        // TODO add your handling code here:
        int selectedRowCount = jTable1.getSelectedRowCount();
        if (selectedRowCount != 1) {
            JOptionPane.showMessageDialog(null, WarningMessage.SELECT_ONE_RECORD);
        } else {
            HotelBean hotel = this.constructHotelBean();
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new UpdateHotel(hotel).setVisible(true);
                }
            });
        }
    }//GEN-LAST:event_updateHotelActionPerformed

    private void deleteHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHotelActionPerformed
        // TODO add your handling code here:

        int selectedRowCount = jTable1.getSelectedRowCount();
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, WarningMessage.MULTIPLE_SELECTION);
        } else if (selectedRowCount == 0) {
            JOptionPane.showMessageDialog(null, WarningMessage.NO_SELECTION);
        } else {
            int confirmDelete = JOptionPane.showConfirmDialog(null, WarningMessage.CONFIRM_DELETE, null, JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == confirmDelete) {
                int selectedHotel = jTable1.getSelectedRow();
                Long hotelId = Long.parseLong(jTable1.getModel().getValueAt(selectedHotel, 0).toString());

                StringBuilder sb = new StringBuilder("delete hotel where hotel_id = ");
                sb.append(hotelId);

                boolean deleteResult;

                try {
                    deleteResult = Database.getInstance().updateTable(Database.DB_FIT5148A, sb.toString());
                    if (deleteResult == true) {
                        JOptionPane.showMessageDialog(null, WarningMessage.DELETE_S);
                        this.showAllHotelToTable();
                    } else {
                        JOptionPane.showMessageDialog(null, WarningMessage.DELETE_F);
                    }

                } catch (SQLException ex) {

                    if (ex.getErrorCode() == 20002) {
                        JOptionPane.showMessageDialog(null, WarningMessage.FOREIGN_KEY_DELETE);
                        return;
                    }

                }

            }
        }
        Database.getInstance().closeDBConnection();
    }//GEN-LAST:event_deleteHotelActionPerformed

    private HotelBean constructHotelBean() {
        HotelBean hotel = new HotelBean();

        int selectedHotel = jTable1.getSelectedRow();

//        System.out.print(selectedHotel.);
        hotel.setHotelId(Long.parseLong(jTable1.getModel().getValueAt(selectedHotel, 0).toString()));
        hotel.setHotelName((String) jTable1.getModel().getValueAt(selectedHotel, 1));
        hotel.setHotelType((String) jTable1.getModel().getValueAt(selectedHotel, 2));
        hotel.setConstructionYear(Integer.parseInt(jTable1.getModel().getValueAt(selectedHotel, 3).toString()));
        hotel.setCountry((String) jTable1.getModel().getValueAt(selectedHotel, 4));
        hotel.setCity((String) jTable1.getModel().getValueAt(selectedHotel, 5));
        hotel.setAddress((String) jTable1.getModel().getValueAt(selectedHotel, 6));
        hotel.setContactNumber((String) jTable1.getModel().getValueAt(selectedHotel, 7));
        hotel.setEmail((String) jTable1.getModel().getValueAt(selectedHotel, 8));

        return hotel;
    }

    public List<String> getHotelType() {
        String getHotelType = "select distinct hotel_type from hotel order by hotel_type";

        try {
            ResultSet rset = Database.getInstance().selectRecords(Database.DB_FIT5148A, getHotelType);

            List<String> hotelTypeList = new ArrayList<String>();
            while (rset.next()) {
                hotelTypeList.add(rset.getString(1));
            }
            Database.getInstance().closeDBConnection();
            return hotelTypeList;
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane HotelScrollPane1;
    private javax.swing.JButton deleteHotel;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newHotel;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateHotel;
    // End of variables declaration//GEN-END:variables
}
