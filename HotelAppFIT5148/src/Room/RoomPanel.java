/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Room;

import Hotel.NewHotel;
import Util.ErrorMessage;
import java.sql.Connection;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import hotelappfit5148.*;
import java.math.BigDecimal;
import javax.swing.table.DefaultTableModel;
import oracle.jdbc.OracleDriver;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author thaonguyen
 */
public class RoomPanel extends javax.swing.JPanel {

    Object columnHeaders[] = {"ROOM_NUMBER", "HOTEL_ID", "ROOM_TYPE", "PRICE", "DESCRIPTION"};
    Object data[][] = {{}};
    DefaultTableModel dtm = new DefaultTableModel(data, columnHeaders);
    Connection conn = null;
    Statement stmt = null;

    /**
     * Creates new form RoomPanel
     */
    public RoomPanel() {
        initComponents();
        showAllRoomToTable();
    }

    private void showAllRoomToTable() {
        conn = Database.getInstance().getDBConnection("FIT5148B");
        dtm.setRowCount(0);
        try {
            DriverManager.registerDriver(new OracleDriver());
            stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery("select room_number, hotel_id, room_type, "
                    + "price, description from room  order by room_number DESC");

            ResultSetMetaData mdata = rset.getMetaData();
            int numberOfColumns = mdata.getColumnCount();
            while (rset.next()) {
                Object[] rowData = new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; i++) {
                    rowData[i] = rset.getObject(i + 1);
                }
                dtm.addRow(rowData);
            }
            Database.getInstance().closeDBConnection();
        } catch (SQLException f) {
            System.out.println(f.getMessage());
        }
    }
    
//    private List<FacilityBean> getListFacilityOfRoom(String roomNumber, Long hotelId){
//        conn = Database.getInstance().getDBConnection("FIT5148B");
//        dtm.setRowCount(0);
//        try {
//            DriverManager.registerDriver(new OracleDriver());
//            stmt = conn.createStatement();
//            StringBuilder str = new StringBuilder("select facility_number,room_number, hotel_id, description "
//                    + "from facility  where hotel_id = ");
//            str.append(hotelId);
//            str.append(" and room_number = '");
//            str.append(roomNumber + "'");
//            ResultSet rset = stmt.executeQuery(str.toString());
//            
//
//            ResultSetMetaData mdata = rset.getMetaData();
//            int numberOfColumns = mdata.getColumnCount();
//            while (rset.next()) {
//                Object[] rowData = new Object[numberOfColumns];
//                for (int i = 0; i < rowData.length; i++) {
//                    rowData[i] = rset.getObject(i + 1);
//                }
//                dtm.addRow(rowData);
//            }
//            Database.getInstance().closeDBConnection();
//        } catch (SQLException f) {
//            System.out.println(f.getMessage());
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        newRoomButton = new javax.swing.JButton();
        updateRoomButton = new javax.swing.JButton();
        deleteRoomButton = new javax.swing.JButton();
        HotelScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        facilityTextField1 = new javax.swing.JTextField();

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        newRoomButton.setText("New Room");
        newRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoomButtonActionPerformed(evt);
            }
        });

        updateRoomButton.setText("Update");
        updateRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoomButtonActionPerformed(evt);
            }
        });

        deleteRoomButton.setText("Delete");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(dtm);
        HotelScrollPane1.setViewportView(jTable1);

        jLabel1.setText("View Room");

        jLabel2.setText("Facility Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HotelScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(facilityTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(newRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRoomButton)))
                .addGap(466, 466, 466))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchButton)
                    .addComponent(facilityTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(HotelScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRoomButton)
                    .addComponent(updateRoomButton)
                    .addComponent(deleteRoomButton))
                .addGap(2, 2, 2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        dtm.setRowCount(0);

        try {
            // TODO add your handling code here:

            String facility = this.facilityTextField1.getText().trim();
            StringBuilder sbSQL = new StringBuilder("select room.room_number, room.hotel_id, room.room_type, room.price, room.description  "
                    + "from room");

            if (!"".equals(facility)) {
                sbSQL.append(", facility where room.room_number = facility.room_number and room.hotel_id = facility.hotel_id ");
                sbSQL.append("and lower(facility.description) like '%" + facility.toLowerCase() + "%' ");
            }
            sbSQL.append(" order by room_number DESC");
            System.out.print(sbSQL);
            ResultSet rset = Database.getInstance().selectRecords("FIT5148B", sbSQL.toString());
            ResultSetMetaData mdata = rset.getMetaData();
            int numberOfColumns = mdata.getColumnCount();
            while (rset.next()) {
                Object[] rowData = new Object[numberOfColumns];
                for (int i = 0; i < rowData.length; i++) {
                    rowData[i] = rset.getObject(i + 1);
                }
                dtm.addRow(rowData);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void newRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoomButtonActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertUpdateHRoomDialog(null, ErrorMessage.INSERT_ACT).setVisible(true);
            }
        });


    }//GEN-LAST:event_newRoomButtonActionPerformed

    private void updateRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoomButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowCount = jTable1.getSelectedRowCount();
        if (selectedRowCount != 1) {
            JOptionPane.showMessageDialog(null, "Please select one record.");
        } else {
            RoomBean hotel = this.constructRoomBean();
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new InsertUpdateHRoomDialog(hotel, ErrorMessage.UPDATE_ACT).setVisible(true);
                }
            });
        }
    }//GEN-LAST:event_updateRoomButtonActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        // TODO add your handling code here:

        int selectedRowCount = jTable1.getSelectedRowCount();
        if (selectedRowCount > 1) {
            JOptionPane.showMessageDialog(null, ErrorMessage.MULTIPLE_SELECTION);
        } else if (selectedRowCount == 0) {
            JOptionPane.showMessageDialog(null, ErrorMessage.NO_SELECTION);
        } else {
            int confirmDelete = JOptionPane.showConfirmDialog(null, ErrorMessage.CONFIRM_DELETE, null, JOptionPane.YES_NO_OPTION);
            if (JOptionPane.YES_OPTION == confirmDelete) {
                int selectedHotel = jTable1.getSelectedRow();
                String roomNumber = jTable1.getModel().getValueAt(selectedHotel, 0).toString();
                Long hotelId = Long.parseLong(jTable1.getModel().getValueAt(selectedHotel, 1).toString());

                StringBuilder sb = new StringBuilder("delete room where room_number = '");
                sb.append(roomNumber);
                sb.append("' and hotel_id = ");
                sb.append(hotelId);

                boolean deleteResult;

                try {
                    deleteResult = Database.getInstance().updateTable(Database.DB_FIT5148B, sb.toString());
                    if (deleteResult == true) {
                        JOptionPane.showMessageDialog(null, ErrorMessage.DELETE_S);
                        this.showAllRoomToTable();
                    } else {
                        JOptionPane.showMessageDialog(null, ErrorMessage.DELETE_F);
                    }

                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                    if (ex.getErrorCode() == 2292) {
                        JOptionPane.showMessageDialog(null, ErrorMessage.FOREIGN_KEY_DELETE);
                        return;
                    }

                }

            }
        }
        Database.getInstance().closeDBConnection();
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private RoomBean constructRoomBean() {
        RoomBean room = new RoomBean();
        int selectedRoom = jTable1.getSelectedRow();
        room.setRoomNumber((String) jTable1.getModel().getValueAt(selectedRoom, 0));
        room.setHotelId(Long.parseLong(jTable1.getModel().getValueAt(selectedRoom, 1).toString()));
        room.setRoomType((String) jTable1.getModel().getValueAt(selectedRoom, 2));
        room.setPrice(Float.parseFloat(jTable1.getModel().getValueAt(selectedRoom, 3).toString()));
        room.setDescription((String) jTable1.getModel().getValueAt(selectedRoom, 4));
        return room;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane HotelScrollPane1;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JTextField facilityTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newRoomButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateRoomButton;
    // End of variables declaration//GEN-END:variables
}
