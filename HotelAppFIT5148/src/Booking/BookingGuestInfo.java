/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Booking;

import Guest.GuestBean;
import Util.SQLStatement;
import Util.WarningMessage;
import hotelappfit5148.Database;
import hotelappfit5148.MainFrame;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;


/**
 *
 * @author Kaley
 */
public class BookingGuestInfo extends javax.swing.JPanel {

    private String[] selectedRow;
    private int customerCitizenId;
    private double price;
    private String check_in;
    private String check_out;
    private MainFrame mf;
    //private int numberOfCurrentGuest;
    private int numberOfRoomGuest;
    
    private List<Integer> bookingGuests = new ArrayList();
    
    //TODO: Change to GuestBean
    //private List<String> guest = new ArrayList();
    private GuestBean currGuest;
    private static CallableStatement cstmt;
    
    private final static String ROOMTYPE_SINGLE = "single";
    private final static String ROOMTYPE_STUDIO = "studio";
    private final static String ROOMTYPE_SUITE = "suite";
    private final static String ROOMTYPE_DOUBLE = "double";

    private final static int WITH_CITIZEN_ID_FLAG = 1;
    private final static int WITH_GUEST_ID_FLAG = 2;

    private final static String BOOKING_ID = "booking_id";
    /**
     * Creates new form Booking
     */
    public BookingGuestInfo(String room_type, MainFrame mf, String check_in, String check_out, double price, int citizen_id, String[] selectedRow) {
        initComponents();
        jLabel12.setText(totalGuest(room_type));
        jLabel14.setText("0");
        numberOfRoomGuest = Integer.valueOf(jLabel12.getText());
        //numberOfCurrentGuest = 0;

        this.selectedRow = selectedRow;
        this.customerCitizenId = citizen_id;
        this.price = price;
        this.check_in = check_in;
        this.check_out = check_out;
        this.mf = mf;
    }

    // check number of bookingGuests a specific room allows
    public String totalGuest(String room_type) {
        String totalGuest = "";
        switch (room_type.toLowerCase()) {
            case ROOMTYPE_SINGLE:
            case ROOMTYPE_STUDIO:
            case ROOMTYPE_SUITE:
                totalGuest = "1";
                break;
            case ROOMTYPE_DOUBLE:
                totalGuest = "2";
                break;
            default:
                //System.out.println(WarningMessage.INVALID_NUMBER);
                break;
        }
        return totalGuest;
    }

    // Access guest information from table guest
    public GuestBean getGuestInfor(int id, int flag) {

        try {
            String search = "";
            if (flag == WITH_CITIZEN_ID_FLAG){
                search = SQLStatement.SELECT_GUEST_WITH_CITIZEN + id;
            }else{
                search = SQLStatement.SELECT_GUEST_WITH_GUESTID + id;
            }

            ResultSet rset = Database.getInstance().selectRecords(Database.DB_FIT5148B, search);
            
            currGuest = new GuestBean();

            while (rset.next()) {

                currGuest.setGuest_id(rset.getInt(1));
                currGuest.setTitle(rset.getString(2));                
                currGuest.setFirstName(rset.getString(3));
                currGuest.setLastName(rset.getString(4));
                currGuest.setCitizenID(rset.getInt(5));
                if (rset.getDate(6) != null){
                    currGuest.setDOB(Database.dateFormat.format(rset.getDate(6)));
                }
                currGuest.setCountry(rset.getString(7));
                currGuest.setCity(rset.getString(8));
                currGuest.setStreet(rset.getString(9));
                currGuest.setEmail(rset.getString(10));
                

            }
            rset.close();
            Database.getInstance().closeDBConnection();
        } catch (SQLException f) {
            
            f.printStackTrace();
        }
        return currGuest;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        booking = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        addGuest = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Guest Information");

        jLabel2.setText("Guest title:");

        jLabel3.setText("Guest name:");

        jLabel5.setText("Citizen ID");

        jLabel6.setText("Date of Birth:");

        jLabel8.setText("Street:");

        jLabel9.setText("Country:");

        jLabel10.setText("City:");

        jLabel11.setText("Guest email:");

        booking.setLabel("Booking");
        booking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingActionPerformed(evt);
            }
        });

        cancel.setAutoscrolls(true);
        cancel.setLabel("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        addGuest.setText("Add");
        addGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGuestActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setEnabled(false);

        jTextField2.setEditable(false);
        jTextField2.setText(" ");
        jTextField2.setEnabled(false);

        jTextField3.setEditable(false);
        jTextField3.setText(" ");
        jTextField3.setEnabled(false);

        jTextField4.setEditable(false);
        jTextField4.setText(" ");
        jTextField4.setEnabled(false);

        jTextField5.setEditable(false);
        jTextField5.setText(" ");
        jTextField5.setEnabled(false);

        jTextField6.setEditable(false);
        jTextField6.setText(" ");
        jTextField6.setEnabled(false);

        jTextField7.setEditable(false);
        jTextField7.setText(" ");
        jTextField7.setEnabled(false);

        jCheckBox1.setText("Add current customer as guest");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("You are able to add ");

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("No.");

        jLabel13.setText("guest(s). You have added ");

        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("No.");

        jLabel15.setText("guest(s).");

        jLabel16.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel16.setText("Note:");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2)
                                            .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                            .addComponent(jTextField1))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCheckBox1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(52, 52, 52)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel10)
                                                        .addGap(66, 66, 66)
                                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel6)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jTextField3))))))
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addComponent(addGuest))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 53, Short.MAX_VALUE)
                                .addComponent(booking)
                                .addGap(46, 46, 46)
                                .addComponent(cancel)
                                .addGap(165, 165, 165))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addGuest)
                    .addComponent(booking)
                    .addComponent(cancel))
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        mf.removePanel2();
    }//GEN-LAST:event_cancelActionPerformed

    private int callSPAddCustomerAsGuest(String dbName, int citizen_id){
        Connection dbConnection = null;
        try{
            dbConnection = Database.getInstance().getDBConnection(dbName);
            cstmt = dbConnection.prepareCall(SQLStatement.CALLSP_ADDCUSTOMERTOGUEST);
            
            cstmt.setInt(1, citizen_id);
            cstmt.registerOutParameter(2, java.sql.Types.INTEGER);

            cstmt.executeUpdate();

            int guestId = cstmt.getInt(2);
            cstmt.close();
            
            return guestId;
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            
        }
        
        return 0;
    }
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(!this.jCheckBox1.isSelected()){
            bookingGuests.remove(customerCitizenId);
            this.jLabel14.setText(String.valueOf(bookingGuests.size()));
            return;
        }
        
        int guestId = callSPAddCustomerAsGuest(Database.DB_FIT5148B, customerCitizenId);
        bookingGuests.add(guestId);
        
        this.jLabel14.setText(String.valueOf(bookingGuests.size()));

        JOptionPane.showMessageDialog(null, WarningMessage.ADD_CUSTOMER_TO_GUEST_S);
        
        //Get Guest all info
        currGuest = getGuestInfor(guestId, WITH_GUEST_ID_FLAG);
        
        //Display Guest
        displayGuest();
        
//        //check whether customer citizen id exist in guest table
//        int guestId = this.getGuestID(this.customerCitizenId);
//
//        //if not insert into guest table
//        if (guestId == 0) {
//            String query = SQLStatement.SELECT_CUSTOMER_WITH_CITIZEN + customerCitizenId;
//
//            try {
//                
//                ResultSet rset = Database.getInstance().selectRecords(Database.DB_FIT5148B, query);
//                if (rset.next()) {
//                    
//                    String insert = SQLStatement.INSERT_GUEST + rset.getString(2)
//                            + "','" + rset.getString(3) + "','" + rset.getString(4) + "'," + rset.getString(5) + ","
//                            + "TO_DATE('" + Database.dateFormat.format(rset.getDate(6)) + "', '" + Database.DB_DATE_FORMAT + "'),'" + rset.getString(7)
//                            + "','" + rset.getString(8) + "','" + rset.getString(9) + "','" + rset.getString(14) + "')";
//                    
//                    Database.getInstance().updateTable(Database.DB_FIT5148B, insert);
//                    
//                }
//                rset.close();
//                Database.getInstance().closeDBConnection();
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void displayGuest(){
        //Clear last guest's information
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField5.setText("");
        jTextField4.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        
        //set current guest information
        jTextField1.setText(currGuest.getTitle());
        jTextField2.setText(currGuest.getFirstName() + " " + currGuest.getLastName());
        jTextField3.setText(currGuest.getDOB());
        jTextField4.setText(currGuest.getStreet());
        jTextField5.setText(currGuest.getEmail());
        jTextField6.setText(currGuest.getCity());
        jTextField7.setText(currGuest.getCountry());
        jTextField8.setText(String.valueOf(currGuest.getCitizenID()));
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // search citizen ID from guest table
        int citizen_id = Integer.valueOf(jTextField8.getText());
        
        GuestBean currGuest = getGuestInfor(citizen_id, WITH_CITIZEN_ID_FLAG);

        displayGuest();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    // get guest id
    public int getGuestID(String citizen_id) {
        int guest_id = 0;

        try {
            
            ResultSet rset = Database.getInstance().selectRecords(Database.DB_FIT5148B, 
                    SQLStatement.SELECT_GUESTID_FROM_CITIZEN + citizen_id);
            
            if (rset.next()) {
                guest_id = Integer.valueOf(rset.getString(1));
            }
            rset.close();
            Database.getInstance().closeDBConnection();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, WarningMessage.GUEST_NOT_EXIST);
        }

        return guest_id;
    }

    private void addGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGuestActionPerformed

        if(jTextField1.getText().isEmpty()){
            javax.swing.JOptionPane.showMessageDialog(this, "Please click search");
            
            return;
        }
        
        if (numberOfRoomGuest == bookingGuests.size()) {
            javax.swing.JOptionPane.showMessageDialog(this, WarningMessage.MAXIMUM_GUEST_EXCEEDS);
        } else if (!"".equals(jTextField2.getText())) {
            //numberOfCurrentGuest++;   
            bookingGuests.add(currGuest.getGuest_id());
            this.jLabel14.setText(String.valueOf(bookingGuests.size()));

            //int guestID = getGuestID(jTextField8.getText());
            //this.bookingGuests.add(guestID);

        } else if( !this.jCheckBox1.isSelected()){
            javax.swing.JOptionPane.showMessageDialog(this, WarningMessage.GUEST_NOT_EXIST);
        }

        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField5.setText("");
        jTextField4.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
    }//GEN-LAST:event_addGuestActionPerformed

    private int getCustomerId(int citizenId) {
        String sql = SQLStatement.SELECT_CUSTID_FROM_CITIZEN + citizenId;

        try {            
            ResultSet set = Database.getInstance().selectRecords(Database.DB_FIT5148B, sql);
            if (set.next()) {
                return set.getInt(1);
            }
            set.close();
            Database.getInstance().closeDBConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    // synchronize
    public synchronized void booking(){
        
        int book_id = 0;
        int cus = this.getCustomerId(customerCitizenId);
        try {
            PreparedStatement preparedStatement = null;
            Connection dbConnection = Database.getInstance().getDBConnection(Database.DB_FIT5148B);
            String insertBooking = SQLStatement.INSERT_BOOKING + cus + ", TO_DATE('" + check_in + "', '" + Database.DB_DATE_FORMAT 
                    + "'), TO_DATE('" + check_out + "', '" + Database.DB_DATE_FORMAT + "'), " + price + ", 'U')";
            preparedStatement = dbConnection.prepareStatement(insertBooking, new String[]{BOOKING_ID});
            preparedStatement.executeUpdate();
            ResultSet booking_id_set = preparedStatement.getGeneratedKeys();
            if (booking_id_set != null && booking_id_set.next()) {
                book_id = booking_id_set.getInt(1);
            }

            booking_id_set.close();
            preparedStatement.close();
            Database.getInstance().closeDBConnection();
              
            mf.accessPaymentGUI(book_id, selectedRow, cus + "", bookingGuests);
        } catch (SQLException ex) {
            //Logger.getLogger(BookingGuestInfo.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }
    
    private void bookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingActionPerformed

       booking();
    }//GEN-LAST:event_bookingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGuest;
    private javax.swing.JButton booking;
    private javax.swing.JButton cancel;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
